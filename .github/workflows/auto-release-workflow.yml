name: 自动发布

on:
  push:
    tags:
      - 'v*'  # 当推送v开头的tag时触发
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（如: 3.5.3）'
        required: true
        default: '3.5.3'

jobs:
  # 第一阶段：并行构建所有平台
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 不要因为一个平台失败就停止其他平台
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macos
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact_name: linux

    steps:
      - uses: actions/checkout@v4

      - name: 安装Linux依赖
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 安装依赖
        run: pnpm install --no-frozen-lockfile

      - name: 安装 droid2api 依赖
        run: |
           cd droid2api
           npm install --production
           cd ..

      - name: 构建
        run: pnpm tauri build --target ${{ matrix.target }}

      - name: 准备发布文件
        shell: bash
        run: |
          mkdir -p release-files
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp src-tauri/target/release/bundle/nsis/*.exe release-files/ 2>/dev/null || true
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cp src-tauri/target/*/release/bundle/dmg/*.dmg release-files/ 2>/dev/null || true
          else
            cp src-tauri/target/release/bundle/deb/*.deb release-files/ 2>/dev/null || true
            cp src-tauri/target/release/bundle/appimage/*.AppImage release-files/ 2>/dev/null || true
          fi
          ls -la release-files/

      # 上传构建产物到 GitHub Actions Artifacts
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: release-files/*
          retention-days: 1
          if-no-files-found: error

  # 第二阶段：串行发布所有平台（等待所有构建完成）
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 整理发布文件
        run: |
          mkdir -p release-files
          find all-artifacts -type f -exec cp {} release-files/ \;
          echo "📦 准备发布的文件："
          ls -la release-files/

      - name: 创建或更新 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
          name: ${{ github.event_name == 'workflow_dispatch' && format('CC-Switch v{0}', github.event.inputs.version) || format('CC-Switch {0}', github.ref_name) }}
          files: release-files/*
          draft: false
          prerelease: false
          body: |
            ## 🎉 CC-Switch 新版本发布

            ### 📦 下载地址

            - **Windows**: CC Switch_*_x64-setup.exe
            - **macOS**: CC Switch_*_aarch64.dmg
            - **Linux**: CC Switch_*_amd64.deb 或 CC Switch_*.AppImage

            ### 📝 更新说明

            请查看下方的提交记录了解详细更新内容。

            ---

            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
